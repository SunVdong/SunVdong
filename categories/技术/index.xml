<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>技术 - 分类 - vdong.xyz</title><link>/categories/%E6%8A%80%E6%9C%AF/</link><description>技术 - 分类 - vdong.xyz</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 04 Nov 2021 19:11:06 +0800</lastBuildDate><atom:link href="/categories/%E6%8A%80%E6%9C%AF/" rel="self" type="application/rss+xml"/><item><title>composer</title><link>/posts/composer/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/composer/</guid><description><![CDATA[​ composer require &ldquo;mk-j/php_xlsxwriter&rdquo; &ndash;no-update 版本说明 &ldquo;require&rdquo;: { &ldquo;vendor/package&rdquo;: &ldquo;1.3.2&rdquo;, // exactly 1.3.2 // &gt;, &lt;, &gt;=, &lt;= | specify upper / lower bounds &quot;vendor/package&quot;: &quot;&gt;=1.3.2&quot;, // anything above or equal to 1.3.2 &quot;vendor/package&quot;: &quot;&lt;1.3.2&quot;, // anything below 1.3.2 // * | wildcard &quot;vendor/package&quot;: &quot;1.3.*&quot;, // &gt;=1.3.0 &lt;1.4.0 // ~ | allows last digit specified to go up &quot;vendor/package&quot;: &quot;~1.3.2&quot;, // &gt;=1.3.2 &lt;1.4.0 &quot;vendor/package&quot;: &quot;~1.3&quot;, // &gt;=1.3.0]]></description></item><item><title>linux发udp包</title><link>/posts/linux%E5%8F%91udp%E5%8C%85/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/linux%E5%8F%91udp%E5%8C%85/</guid><description>Linux 直接发送UDP包 如果往本地UDP端口發送數據，那麼可以使用以下命令： echo &amp;#34;hello&amp;#34; &amp;gt; /dev/udp/192.168.1.81/5060 ​ 意思是往本地192.168.1.81的5060端口發送數據包</description></item><item><title>Mysql</title><link>/posts/mysql/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/mysql/</guid><description>三大范式 非标准化形式： 主键不能重复；不出现重复记录 字段原子性，不能再分 反例： 联系方式 =》（电话，邮箱） 不能存在部分依赖。 随着主键值的变化，其</description></item><item><title>PHP 和 Nginx 通信</title><link>/posts/php%E5%92%8Cnginx%E9%80%9A%E4%BF%A1/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/php%E5%92%8Cnginx%E9%80%9A%E4%BF%A1/</guid><description>一个请求的生命周期 0. 启动服务 准备工作 启动 php-fpm，通信模式， TCP socket， Unix scoket。 PHP-FPM 启动两种进程， master：监控端口、分</description></item><item><title>PHP 垃圾回收机制</title><link>/posts/php%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/php%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid><description>变量的存储结构 众所周知，php 是用 c 语言写的，所以其变量存储也依赖于 c 语言。php 的变量的内部是使用一种 zval 的数据结构来保存的。 // php源码 Zend/zend.h</description></item><item><title>PHP 基础</title><link>/posts/php%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/php%E5%9F%BA%E7%A1%80/</guid><description>php 假值 与 empty 和 is_null 当 $a 是以下 值时候 (boolean) $a 为假 false： 未设置的变量 var $a; 未初始化 $a 的值 $a = null; false 0 '' &amp;lsquo;0&amp;rsquo; [] 以上值 empty() 是均为 true 。 isset() 检测 一个变量设置了，且不</description></item><item><title>Unix 过滤器</title><link>/posts/unix-%E8%BF%87%E6%BB%A4%E5%99%A8/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/unix-%E8%BF%87%E6%BB%A4%E5%99%A8/</guid><description>过滤器可以用于管道，通过组合，解决实际问题，优雅而强大。 常用过滤器 cat cat name.txt mobile.txt &amp;gt; data # 合并文件 # -n 显示行号 split ：拆分文件 split [-d] [-a num] [-l lines] [file [prefix]] split data # 默认每</description></item><item><title>Vi 命令一览</title><link>/posts/vi-%E5%91%BD%E4%BB%A4%E4%B8%80%E8%A7%88/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/vi-%E5%91%BD%E4%BB%A4%E4%B8%80%E8%A7%88/</guid><description>移动光标 - 光标移动到上一行开头 + 或 &amp;lt;return&amp;gt; 光标移动到下一行开头 0 当前行开头 $ 当前行末尾 ^ 当前行第一个非空字符 w 下一个单词的词首 W 忽略标点 e 下一个单</description></item><item><title>依赖注入</title><link>/posts/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</guid><description>​ 概述 控制反转**（Inversion of Control, IoC）**，是面向对象编程的一种设计原则，目的是降低代码耦合。常见方式有 依赖注入 （Depende</description></item><item><title>容器常用命令</title><link>/posts/%E5%AE%B9%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Thu, 04 Nov 2021 19:11:06 +0800</pubDate><author><name>vdong</name></author><guid>/posts/%E5%AE%B9%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>​ docker 常用命令 镜像相关 列出镜像 docker image ls 无仓库名的是悬空镜像，docker image ls -f dangling=true 查看悬空镜像， docker image prune 删除悬空镜像。 该命令默认，仅仅显示顶层镜像，</description></item></channel></rss>